ccf(abs(EuroRend)[,2], abs(EuroRend)[,3], ylab = "", xlab = "",
lag.max = 20, main = "Rendements absolus de CAC et FTSE")
Coroul = function(x){
dimension = ncol(x)
rcorrel = cor(x)[lower.tri(diag(dimension), diag = FALSE)]
return(rcorrel)
}
rcorrel = rollapply(EuroRend, width = 250, Coroul, align = "right",
by.column = FALSE)
colnames(rcorrel) = c("DAX & CAC", "DAC & FTSE", "CAC & FTSE")
plot(rcorrel, main = "", xlab = "")
head(EuStockMarkets[,-2])
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
fig.width = 12, fig.height = 8)
library(timeSeries)  # Pour l'analyse de times series
library(fBasics)     # Pour l'analyse basique sur la finance
library(evir)        # Le package où se trouve la base de données
data(siemens)
SieDates = as.character(format(as.POSIXct(attr(siemens, "times")),
"%Y-%m-%d"))
SieRet = timeSeries(siemens*100, charvec = SieDates)
colnames(SieRet) = "SieRet"
par(mfrow = c(2, 2))
seriesPlot(SieRet, title = FALSE, main = "Rendements quotidiens de Siemens",
col = "blue")
boxplot(SieRet, title = FALSE, main = "Box plot sur le rendement",
col = "blue", cex = 0.5, pch = 19)
acf(SieRet, main = "ACF sur le rendement", lag.max = 20,
ylab = "", xlab = "", col = "blue", ci.col = "red")
pacf(SieRet, main = "PACF sur le rendement", lag.max = 20,
ylab = "", xlab = "", col = "blue", ci.col = "red")
summary(SieRet)
SieRetAbs = abs(SieRet)
SieRet100 <- tail(sort(abs(series(SieRet))), 100)[1]
idx <- which(series(SieRetAbs) > SieRet100, arr.ind = TRUE)
SieRetAbs100 = timeSeries(rep(0, length(SieRet)),
charvec = time(SieRet))
SieRetAbs100[idx, 1] = SieRetAbs[idx]
acf(SieRetAbs, main = "ACF sur les reendements absolus", lag.max = 20,
ylab = "", xlab = "", col = "blue", ci.col = "red")
pacf(SieRetAbs, main = "PACF sur rendements absolus", lag.max = 20,
ylab = "", xlab = "", col = "blue", ci.col = "red")
qqnormPlot(SieRet, main = "QQ-Plot sur le rendement", title = FALSE,
col = "blue", cex = 0.5, pch = 19)
plot(SieRetAbs100, type = "h", main = "Clustering de volatilité",
ylab = "", xlab = "", col = "blue")
?acf
acf(SieRetAbs, main = "ACF sur les reendements absolus", lag.max = 20,
ylab = "", xlab = "", col = "blue", ci.col = "red")
pacf(SieRetAbs, main = "PACF sur rendements absolus", lag.max = 20,
ylab = "", xlab = "", col = "blue", ci.col = "red")
par(mfrow=c(2,2))
acf(SieRetAbs, main = "ACF sur les reendements absolus", lag.max = 20,
ylab = "", xlab = "", col = "blue", ci.col = "red")
pacf(SieRetAbs, main = "PACF sur rendements absolus", lag.max = 20,
ylab = "", xlab = "", col = "blue", ci.col = "red")
qqnormPlot(SieRet, main = "QQ-Plot sur le rendement", title = FALSE,
col = "blue", cex = 0.5, pch = 19)
plot(SieRetAbs100, type = "h", main = "Clustering de volatilité",
ylab = "", xlab = "", col = "blue")
tinytex::tlmgr_install("beamer")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
fig.width = 12, fig.height = 8)
library(fPortfolio)
library(FRAPO)
data("MultiAsset")
head(data)
head(MultiAsset)
pr <- timeSeries(MultiAsset, charvec = rownames(MultiAsset))
data = returns(pr, methdo = "discrete", percentages = TRUE, trim = TRUE)
NAssets = ncol(pr)
ANames = colnames(pr)
Sigma = cov(data)
mu = colMeans(data)
hull = markowitzHull(data, nFrontierPoints = 50)
grid = feasibleGrid(hull, trace = FALSE)
divers = bestDiversification(grid, trace = FALSE)
library(Rdonlp2)
NAssets = ncol(pr)
ANames = colnames(pr)
Sigma = cov(data)
mu = colMeans(data)
NAssets = ncol(pr)
ANames = colnames(pr)
Sigma = cov(data)
mu = colMeans(data)
hull = markowitzHull(data, nFrontierPoints = 50)
grid = feasibleGrid(hull, trace = FALSE)
divers = bestDiversification(grid, trace = FALSE)
library(Rccp)
.libPaths()
allWeights = attr(divers, "weights")
idx = sort(unique(allWeights[,1]))
idxRow = 1:length(idx)
??bestDiversification
hull = markowitzHull(data, nFrontierPoints = 50)
grid = feasibleGrid(hull, trace = FALSE)
divers = bestDiversification(grid, trace = FALSE)
library(Rdonlp2)
mrc.sd = function(data, weights){
sigma = cov(data)
a = mrc(weights, Sigma)
sd(a)
}
allWeights = attr(divers, "weights")
idx = sort(unique(allWeights[,1]))
idxRow = 1:length(idx)
for (j in idx) {
w = matrix(allWeights[allWeights[,1] == j, -c(1, 2)], ncol = NAssets)
divm = vector()
length(divm) = nrow(w)
for (i in 1:nrow(w)) {
divm[i] = dr(w[i,], Sigma)
}
divmidx = which.max(divm)
wopt = w[divmidx,]
dropt[idxRow[j],] = c(crossprod(wopt, mu), sqrt(crossprod(wopt, Sigma) %*% wopt))
}
drop[idxRow[j],] = c(crossprod(wopt, mu), sqrt(crossprod(wopt, Sigma) %*% wopt))
drop.terms[idxRow[j],] = c(crossprod(wopt, mu), sqrt(crossprod(wopt, Sigma) %*% wopt))
dropt[idxRow[j],] = c(crossprod(wopt, mu), sqrt(crossprod(wopt, Sigma) %*% wopt))
??drop.terms
dropt = matrix(0, nrow = length(idx), ncol = 2)
for (j in idx) {
w = matrix(allWeights[allWeights[,1] == j, -c(1, 2)], ncol = NAssets)
divm = vector()
length(divm) = nrow(w)
for (i in 1:nrow(w)) {
divm[i] = dr(w[i,], Sigma)
}
divmidx = which.max(divm)
wopt = w[divmidx,]
dropt[idxRow[j],] = c(crossprod(wopt, mu), sqrt(crossprod(wopt, Sigma) %*% wopt))
}
surf = riskSurface(divers, FUN = "mrc.sd")
surfacePlot(surf, type = "filled.contour", palette = topo.colors, addHull = TRUE,
addGrid = FALSE, addAssets = FALSE, xlab = "Surface Risk", ylab = "Surface Return",
main = "Convexe Hull avec Surface à Risque:\nStd.Dev. of MRC et MDP-ligne")
lines(x = dropt[,2], y = dropt[,1], col = "blue", lwd = 2)
surfacePlot(surf, type = "filled.contour", palette = topo.colors, addHull = TRUE,
addGrid = FALSE, addAssets = FALSE, xlab = "Surface Risk", ylab = "Surface Return",
main = "Convexe Hull avec Surface à Risque:\nStd.Dev. of MRC et MDP-ligne")
lines(x = dropt[,2], y = dropt[,1], col = "blue", lwd = 2)
box()
surfacePlot(surf, type = "filled.contour", palette = topo.colors, addHull = TRUE,
addGrid = FALSE, addAssets = FALSE, xlab = "Surface Risk", ylab = "Surface Return",
main = "Convexe Hull avec Surface à Risque:\nStd.Dev. of MRC et MDP-ligne")
lines(x = dropt[,2], y = dropt[,1], col = "blue", lwd = 2)
box()
# Spécial points autour du graphique
frontier = portfolioFrontier(data)
MVP = minvariancePoints(frontier)
TGP = tangencyPoints(frontier)
sap = singleAssetPoints(frontier)
wewp = rep(1/NAssets, NAssets)
mewp = crossprod(mu, wewp)
sewp = sqrt(crossprod(wewp, Sigma) %*% wewp)
ERC = PERC(Sigma)
werc = Weights(ERC)/100.0
merc = crossprod(mu, werc)
serc = sqrt(crossprod(werc, Sigma) %*% werc)
points(sap, col = "darkgreen", pch = 19, cex = 0.8)
text(sap, ANames, col = "darkred", cex = 0.6, pos = 4)
points(TGP, col = "tan", pch = 19, cex = 2.5)
text(TGP[1], TGP[2], "TGP", col = "purple", cex = 0.5)
points(x = sewp, y = mewp, col = "tan", pch = 19, cex = 2.5)
text(sewp, mewp, "EWP", col = "purple", cex = 0.5)
points(x = serc, y = merc, col = "tan", pch = 19, cex = 2.5)
text(serc, merc, "ERC", col = "purple", cex = 0.5)
points(MVP, col = "tan", pch = 19, cex = 2.5)
text(MVP[1], MVP[2], "MVP", col = "purple", cex = 0.5)
surfacePlot(surf, type = "filled.contour", palette = topo.colors, addHull = TRUE,
addGrid = FALSE, addAssets = FALSE, xlab = "Surface Risk", ylab = "Surface Return",
main = "Convexe Hull avec Surface à Risque:\nStd.Dev. of MRC et MDP-ligne")
lines(x = dropt[,2], y = dropt[,1], col = "blue", lwd = 2)
box()
# Spécial points autour du graphique
frontier = portfolioFrontier(data)
MVP = minvariancePoints(frontier)
TGP = tangencyPoints(frontier)
sap = singleAssetPoints(frontier)
wewp = rep(1/NAssets, NAssets)
mewp = crossprod(mu, wewp)
sewp = sqrt(crossprod(wewp, Sigma) %*% wewp)
ERC = PERC(Sigma)
werc = Weights(ERC)/100.0
merc = crossprod(mu, werc)
serc = sqrt(crossprod(werc, Sigma) %*% werc)
points(sap, col = "darkgreen", pch = 19, cex = 0.8)
text(sap, ANames, col = "darkred", cex = 0.6, pos = 4)
points(TGP, col = "tan", pch = 19, cex = 2.5)
text(TGP[1], TGP[2], "TGP", col = "purple", cex = 0.5)
points(x = sewp, y = mewp, col = "tan", pch = 19, cex = 2.5)
text(sewp, mewp, "EWP", col = "purple", cex = 0.5)
points(x = serc, y = merc, col = "tan", pch = 19, cex = 2.5)
text(serc, merc, "ERC", col = "purple", cex = 0.5)
points(MVP, col = "tan", pch = 19, cex = 2.5)
text(MVP[1], MVP[2], "MVP", col = "purple", cex = 0.5)
surfacePlot(surf, type = "filled.contour", palette = topo.colors, addHull = TRUE,
addGrid = FALSE, addAssets = FALSE, xlab = "Surface Risk", ylab = "Surface Return",
main = "Convexe Hull avec Surface à Risque:\nStd.Dev. of MRC et MDP-ligne")
lines(x = dropt[,2], y = dropt[,1], col = "blue", lwd = 2)
box()
# Spécial points autour du graphique
frontier = portfolioFrontier(data)
MVP = minvariancePoints(frontier)
TGP = tangencyPoints(frontier)
sap = singleAssetPoints(frontier)
wewp = rep(1/NAssets, NAssets)
mewp = crossprod(mu, wewp)
sewp = sqrt(crossprod(wewp, Sigma) %*% wewp)
ERC = PERC(Sigma)
werc = Weights(ERC)/100.0
merc = crossprod(mu, werc)
serc = sqrt(crossprod(werc, Sigma) %*% werc)
points(sap, col = "darkgreen", pch = 19, cex = 0.8)
text(sap, ANames, col = "darkred", cex = 0.6, pos = 4)
points(TGP, col = "tan", pch = 19, cex = 2.5)
text(TGP[1], TGP[2], "TGP", col = "purple", cex = 0.5)
points(x = sewp, y = mewp, col = "tan", pch = 19, cex = 2.5)
text(sewp, mewp, "EWP", col = "purple", cex = 0.5)
points(x = serc, y = merc, col = "tan", pch = 19, cex = 2.5)
text(serc, merc, "ERC", col = "purple", cex = 0.5)
points(MVP, col = "tan", pch = 19, cex = 2.5)
text(MVP[1], MVP[2], "MVP", col = "purple", cex = 0.5)
sdmrc = surf$z
c104 = which((sdmrc >= 10.35) & (sdmrc <= 10.45), arr.ind = TRUE)
w104 = matrix(NA, nrow = nrow(c104), ncol = NAssets)
colnames(w104) = ANames
for (i in 1:nrow(c104)) {
gidx = which((allWeights[,1] == c104[i, 1]) & (allWeights[,2] == c104[i, 2]), arr.ind = TRUE)
w104[i,] = allWeights[gidx, -c(1, 2)]
}
sdmrc104 = apply(w104, 1, function(x)
sd(mrc(x, Sigma = Sigma)))
sqrt(crossprod(x, Sigma) %*% x)) * 100
sdr104 = apply(w104, 1, function(x)
sqrt(crossprod(x, Sigma) %*% x) * 100)
wEquity = w104[,1:6]
wBonds = w104[,7:9]
wGold = w104[,10]
wEquity = rowSums(wBonds)
wBonds = rowSums(wBonds)
wAsset = cbind(wEquity, wBonds, wGold)*100
ans = cbind(wAsset, sdmrc104, sdr104)
ans
colnames(ans) = c("Equity", "Bonds", "Gold", "StdDev")
ans = cbind(wAsset, sdmrc104, sdr104)
colnames(ans) = c("Equity", "Bonds", "Gold", "StdDev")
colnames(ans) = c("Equity", "Bonds", "Gold", "StdDev.of MRC", "StdDev.Risk")
rownames(ans) = 1:nrow(ans)
sdmrc104 = apply(w104, 1, function(x)
sd(mrc(x, Sigma = Sigma)))
sdr104 = apply(w104, 1, function(x)
sqrt(crossprod(x, Sigma) %*% x) * 100)
wEquity = w104[,1:6]
wBonds = w104[,7:9]
wGold = w104[,10]
wEquity = rowSums(wBonds)
wBonds = rowSums(wBonds)
wAsset = cbind(wEquity, wBonds, wGold)*100
ans = cbind(wAsset, sdmrc104, sdr104)
colnames(ans) = c("Equity", "Bonds", "Gold", "StdDev.of MRC", "StdDev.Risk")
rownames(ans) = 1:nrow(ans)
sdmrc104 = apply(w104, 1, function(x)
sd(mrc(x, Sigma = Sigma)))
sdr104 = apply(w104, 1, function(x)
sqrt(crossprod(x, Sigma) %*% x) * 100)
wEquity = w104[,1:6]
wBonds = w104[,7:9]
wGold = w104[,10]
wEquity = rowSums(wBonds)
wBonds = rowSums(wBonds)
wAsset = cbind(wEquity, wBonds, wGold)*100
ans = cbind(wAsset, sdmrc104, sdr104)
colnames(ans) = c("Equity", "Bonds", "Gold", "StdDev.of MRC", "StdDev.Risk")
rownames(ans) = 1:nrow(ans)
ans
surfacePlot(surf, type = "filled.contour", palette = topo.colors, addHull = TRUE,
addGrid = FALSE, addAssets = FALSE, xlab = "Surface Risk", ylab = "Surface Return",
main = "Convexe Hull avec Surface à Risque:\nStd.Dev. of MRC et MDP-ligne")
lines(x = dropt[,2], y = dropt[,1], col = "blue", lwd = 2)
box()
# Spécial points autour du graphique
frontier = portfolioFrontier(data)
MVP = minvariancePoints(frontier)
TGP = tangencyPoints(frontier)
sap = singleAssetPoints(frontier)
wewp = rep(1/NAssets, NAssets)
mewp = crossprod(mu, wewp)
sewp = sqrt(crossprod(wewp, Sigma) %*% wewp)
ERC = PERC(Sigma)
werc = Weights(ERC)/100.0
merc = crossprod(mu, werc)
serc = sqrt(crossprod(werc, Sigma) %*% werc)
points(sap, col = "darkgreen", pch = 19, cex = 0.8)
text(sap, ANames, col = "darkred", cex = 0.6, pos = 4)
points(TGP, col = "tan", pch = 19, cex = 2.5)
text(TGP[1], TGP[2], "TGP", col = "purple", cex = 0.5)
points(x = sewp, y = mewp, col = "tan", pch = 19, cex = 2.5)
text(sewp, mewp, "EWP", col = "purple", cex = 0.5)
points(x = serc, y = merc, col = "tan", pch = 19, cex = 2.5)
text(serc, merc, "ERC", col = "purple", cex = 0.5)
points(MVP, col = "tan", pch = 19, cex = 2.5)
text(MVP[1], MVP[2], "MVP", col = "purple", cex = 0.5)
surfacePlot(surf, type = "filled.contour", palette = topo.colors, addHull = TRUE,
addGrid = FALSE, addAssets = FALSE, xlab = "Surface Risk", ylab = "Surface Return",
main = "Convexe Hull avec Surface à Risque:\nStd.Dev. of MRC et MDP-ligne")
lines(x = dropt[,2], y = dropt[,1], col = "blue", lwd = 2)
box()
# Spécial points autour du graphique
frontier = portfolioFrontier(data)
MVP = minvariancePoints(frontier)
TGP = tangencyPoints(frontier)
sap = singleAssetPoints(frontier)
wewp = rep(1/NAssets, NAssets)
mewp = crossprod(mu, wewp)
sewp = sqrt(crossprod(wewp, Sigma) %*% wewp)
ERC = PERC(Sigma)
werc = Weights(ERC)/100.0
merc = crossprod(mu, werc)
serc = sqrt(crossprod(werc, Sigma) %*% werc)
points(sap, col = "darkgreen", pch = 19, cex = 0.8)
text(sap, ANames, col = "darkred", cex = 0.6, pos = 4)
points(TGP, col = "tan", pch = 19, cex = 2.5)
text(TGP[1], TGP[2], "TGP", col = "purple", cex = 0.5)
points(x = sewp, y = mewp, col = "tan", pch = 19, cex = 2.5)
text(sewp, mewp, "EWP", col = "purple", cex = 0.5)
points(x = serc, y = merc, col = "tan", pch = 19, cex = 2.5)
text(serc, merc, "ERC", col = "purple", cex = 0.5)
points(MVP, col = "tan", pch = 19, cex = 2.5)
text(MVP[1], MVP[2], "MVP", col = "purple", cex = 0.5)
q()
q()
q()
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
fig.width = 8, fig.height = 6)
library(readxl)
ipeadata_01_04_2019_10_32_ <- read_excel("ipeadata[01-04-2019-10-32].xls")
dados = ipeadata_01_04_2019_10_32_
head(dados)
library(readxl)
ipeadata_01_04_2019_10_32_ <- read_excel("ipeadata[01-04-2019-10-32].xls")
dados = ipeadata_01_04_2019_10_32_
head(dados)
Pib = ts(dados[,2], start = c(1957, 1), frequency = 4)
par(mfrow = c(1,2))
plot(Pib, main = "PIB_USA", xlab = "Trim/Ano", ylab = "PIB")
grid()
Pib = ts(dados[,2], start = c(1957, 1), frequency = 4)
par(mfrow = c(1,2))
plot(Pib, main = "PIB_USA", xlab = "Trim/Ano", ylab = "PIB")
grid()
acf(Pib, main = "Correlation")
par(mfrow = c(2,2))
plot(Pib, main = "PIB de USA", ylab = "PIB")
grid()
acf(Pib, main = "Autocorrelation", ylab = "FAC", xlab = "Lags")
DPIB = diff(Pib)
plot(DPIB, main = "PIB en différence", ylab = "DPIB")
grid()
acf(DPIB, main = "Autocorrelation", ylab = "FAC", xlab = "Lags")
library(TSA)
library(TSA)
library(urca)
##item e)
y5 = 0.0
for (i in 2:N) {
y5[i] = -0.8*y5[i-1] + aleatorio[i]
}
## Tamanho da amostra
N = 200
for (i in 2:N) {
y5[i] = -0.8*y5[i-1] + aleatorio[i]
}
##item d)
aleatorio = ts(y1)
##item a)
set.seed(123)
y1 = ts(rnorm(N, 0, 1))
par(mfrow = c(2, 1))
plot(y1, xlab = "Tempo", ylab = "obervações")
plot(y1, xlab = "Tempo", ylab = "obervações")
acf(y1, main = "FAC", ylab = "Autocorélation", xlab = "Defasagens")
adf0 = ur.df(Pib, type = "trend", lags = 0)
summary(adf0)
plot(adf0)
adf1 = ur.df(Pib, type = "trend", lags = 1)
summary(adf1)
plot(adf1)
summary(adf1)
adf1 = ur.df(Pib, type = "trend", lags = 4)
summary(adf1)
plot(adf1)
adf1 = ur.df(Pib, type = "trend", lags = 1)
summary(adf1)
bic.adf2 = ur.df(Pib, type = "drift", lags = 1)
summary(bic.adf2)
pib.adf = ur.df(Pib, type = "none", lags = 1)
summary(pib.adf)
DPIB.adf = ur.df(DPIB, type = "trend", lags = 1)
summary(DPIB.adf)
plot(DPIB.adf)
DPIB.adf = ur.df(DPIB, type = "drift", lags = 1)
summary(DPIB.adf)
plot(DPIB.adf)
DPIB.adf = ur.df(DPIB, type = "none", lags = 1)
plot(DPIB.adf)
summary(DPIB.adf)
DPIB.adf = ur.df(DPIB, type = "none", lags = 10)
plot(DPIB.adf)
summary(DPIB.adf)
DPIB.adf = ur.df(diff(DPIB), type = "none", lags = 1)
plot(DPIB.adf)
DPIB.adf = ur.df(diff(log(DPIB)), type = "none", lags = 1)
pib.pp = ur.pp(Pib, type = "Z-tau", model = "trend", lags = "short")
plot(pib.pp)
summary(pib.pp)
pib.pp = ur.pp(DPib, type = "Z-tau", model = "trend", lags = "short")
pib.pp = ur.pp(DPIB, type = "Z-tau", model = "trend", lags = "short")
plot(pib.pp)
summary(pib.pp)
pib.pp = ur.pp(DPIB, type = "Z-tau", model = "constent", lags = "short")
pib.pp = ur.pp(DPIB, type = "Z-tau", model = "constant", lags = "short")
plot(pib.pp)
summary(pib.pp)
pib.ers = ur.ers(Pib, type = c("DF-GLS"), model = c("trend", "constant"), lag.max = 1)
pib.ers = ur.ers(Pib, type = c("DF-GLS"), model = c("trend", "constant"), lag.max = 10)
pib.ers = ur.ers(Pib, type = c("DF-GLS"), model = c("trend"), lag.max = 1)
plot(pib.ers)
summary(pib.ers)
pib.kpss = ur.kpss(Pib, type = "mu", lags = "short", use.lag = NULL)
plot(pib.kpss)
summary(pib.kpss)
pib.kpss = ur.kpss(Pib, type = "tau", lags = "short", use.lag = NULL)
plot(pib.kpss)
summary(pib.kpss)
library(strucchange)
pib.chow = Fstats(Pib ~ 1, from = 0.15)
breakpoints(pib.chow)
sctest(pib.chow)
lines(breakpoints(pib.chow))
library(strucchange)
pib.chow = Fstats(Pib ~ 1, from = 0.15)
breakpoints(pib.chow)
sctest(pib.chow)
lines(breakpoints(pib.chow))
library(strucchange)
pib.chow = Fstats(Pib ~ 1, from = 0.15)
breakpoints(pib.chow)
sctest(pib.chow)
lines(breakpoints(pib.chow))
library(strucchange)
pib.chow = Fstats(Pib ~ 1, from = 0.15)
lines(breakpoints(pib.chow))
library(strucchange)
pib.chow = Fstats(Pib ~ 1, from = 0.15)
plot(breakpoints(pib.chow))
library(strucchange)
pib.chow = Fstats(Pib ~ 1, from = 0.15)
breakpoints(pib.chow)
sctest(pib.chow)
breakpoints(pib.chow)
pib.bp = breakpoints(Pib ~ 1, h = 0.15, breaks = NULL)
summary(pib.bp) ## A série tem cinco quebras estruturais.
N = length(Pib)
DP = ts(rep(0, N))
DL = ts(rep(0, N))
DS = ts(rep(0, N))
DP = ts (rep(0,N))
DL = ts (rep(0,N))
DS = ts (rep(0,N))
Tb = 147
for (t in 1:N) {
if(t == Tb + 1)
DP[t] = 1
if(t > Tb){
DL[t] = 1
DS[t] = t - Tb
}
}
trend = ts(seq(1, N))
model = lm(Pib ~ trend + DL)
summary(model)
res = model$residuals
plot(res)
library(urca)
res.df = ur.df(res, type = "none", lags = 4, selectlags = "BIC")
summary(res.df)
plot(res.df)
res0.df = ur.df(res, type = "none", lags = 0)
summary(res0.df)
lambda = Tb/N
print(lambda)
summary(res.df)
pib0.za = ur.za(Pib, model = "trend")
pib0.za = ur.za(Pib, model = "trend")
summary(pib0.za)
plot(pib0.za)
pib1.za = ur.za(Pib, model = "both")
summary(pib1.za)
plot(pib1.za)
library(tinytex)
warnings()
par(mfrow = c(1, 1))
plot(pib.bp)
plot(res)
plot(res.df)
plot(pib0.za)
plot(pib1.za)
q()
q()
