ArchTest(modelo1$residuals, lag = 8)
ArchTest(modelo1$residuals, lag = 12)
ArchTest(modelo2$residuals, lag = 4)
ArchTest(modelo2$residuals, lag = 8)
ArchTest(modelo2$residuals, lag = 12)
# Aplicar Transformação Box-Cox (1964)
lambda = BoxCox.lambda(ipca)
print(lambda)
modelo3 = Arima(ipca, order = c(1, 0, 0), method = "ML",
lambda = lambda)
summary(modelo3)
modelo4 = Arima(ipca, order = c(1, 0, 1), method = "ML",
lambda = lambda)
summary(modelo4)
#Verificação dos modelos
fit3 = coeftest(modelo3)
#Verificação dos modelos
fit3 = coeftest(modelo3)
fit4 = coeftest(modelo4)
print(fit3)
print(fit4)
# Gráfico dos p-valores com Ljung-Box
tsdiag(modelo3, gof.lag = 20)
tsdiag(modelo4, gof.lag = 20)
# Test de normalidade
par(mfrow = c(1, 2))
hist(modelo3$residuals)
plot(density(modelo3$residuals, kernel = "gaussian"))
jarque.bera.test(modelo3$residuals)
shapiro.test(modelo3$residuals)
# Aplicar Transformação Box-Cox (1964)
lambda = BoxCox.lambda(ipca)
print(lambda)
hist(modelo4$residuals)
plot(density(modelo4$residuals, kernel = "gaussian"))
jarque.bera.test(modelo4$residuals)
shapiro.test(modelo4$residuals)
# Test de heterocedasticidade condicional
ArchTest(modelo3$residuals, lag = 4)
ArchTest(modelo3$residuals, lag = 8)
ArchTest(modelo3$residuals, lag = 12)
ArchTest(modelo4$residuals, lag = 4)
ArchTest(modelo4$residuals, lag = 8)
ArchTest(modelo4$residuals, lag = 12)
AIC(modelo3, modelo4)
BIC(modelo3, modelo4)
# Previsão
prev = forecast(modelo3, h = 6, level = c(0.90, 0.95),
lambda = lambda, biasadj = F)
print(prev)
par(mfrow = c(1, 1))
plot(prev)
summary(prev)
q()
knitr::opts_chunk$set(echo = TRUE, message = FALSE)
library(urca)
library(vars)
data("Canada")
vecm = ca.jo(Canada[, c("prod", "e", "U", "rw")], type = "trace", ecdet = "trend",
K = 3, spec = "transitory")
SR = matrix(NA, nrow = 4, ncol = 4)
SR[4, 2] = 0
SR
LR = matrix(NA, nrow = 4, ncol = 4)
LR[1, 2:4] = 0
LR[2:4, 4] = 0
LR
svec = SVEC(vecm, LR = LR, SR = SR, r = 1, lrtest = FALSE, boot = TRUE, runs = 100)
svec
svec.irf = irf(svec, response = "U", n.ahead = 48, boot = TRUE)
svec.irf
plot(svec.irf)
q()
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
fig.width = 12, fig.height = 8)
library(vars)
library(dse1)
library(lmtest)
set.seed(54321)
e1 = rnorm(500)
e2 = rnorm(500)
y1 = cumsum(e1)
y2 = cumsum(e2)
sr.reg1 = lm(y1 ~ y2)
sr.dw = dwtest(sr.reg1)
sr.reg2 = lm(diff(y1) ~ diff(y2))
plot(sr.reg1)
plot(y1, xlab = "", ylab = "", main = "Cointegrated System")
plot.ts(y1, xlab = "", ylab = "", main = "Cointegrated System")
plot.ts(y1, xlab = "", ylab = "", main = "Cointegrated System")
lines(y2, col = "green")
plot.ts(y1, xlab = "", ylab = "", main = "Not Cointegrated")
lines(y2, col = "blue")
summary(sr.dw)
summary(sr.reg1)
plot.ts(y1, xlab = "", ylab = "", main = "Not Cointegrated")
lines(y2, col = "blue")
set.seed(12345)
e1 = rnorm(250, mean = 0, sd = 0.5)
e2 = rnorm(250, mean = 0, sd = 0.5)
u.ar3 = arima.sim(model = list(ar = c(0.6, -0.2, 0.1)), n = 250, innov = e1)
y2 = cumsum(e2)
y1 = u.ar3 + 0.5*y2
ymax = max(c(y1, y2))
ymin = min(c(y1, y2))
layout(matrix(1:2, nrow = 2, ncol = 1))
plot(y1, xlab = "", ylab = "", ylim = c(ymin, ymax), main = "Cointegrated System")
lines(y2, col = "green")
plot(y1, xlab = "", ylab = "", ylim = c(ymin, ymax), main = "Cointegrated System")
lines(y2, col = "green")
plot(u.ar3, ylab = "", xlab = "", main = "Cointegrating Residuals")
abline(h = 0, col = "red")
library(dynlm)
reg0 = lm(y1 ~ y2)
ect = resid(reg0)[1:249]
dy1 = diff(y1)
dy2 = diff(y2)
ecmdat = cbind(dy1, dy2, ect)
ecm = dynlm(dy1 ~ L(ect, 1) + L(dy1, 1) + L(dy2, 1) , data = ecmdat)
coeftest(ecm)
z = cbind(y1, y2)
test.po.pu = ca.po(z, demean = "none", type = "Pu")
test.po.pz = ca.po(z, demean = "none", type = "Pz")
summary(test.po.pu)
summary(test.po.pz)
test.po.pu
set.seed(12345)
e1 = rnorm(250, 0, 0.5)
e2 = rnorm(250, 0, 0.5)
e3 = rnorm(250, 0, 0.5)
u1.ar1 = arima.sim(model = list(ar = 0.75), innov = e1, n = 250)
u2.ar1 <- arima.sim(model = list(ar = 0.3), innov = e2, n = 250)
y3 = cumsum(e3)
y1 = 0.8 * y3 + u1.ar1
y2 = -0.3 * y3 + u2.ar1
ymax <- max(c(y1, y2, y3))
ymin <- min(c(y1, y2, y3))
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
legend()
head(legend)
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
legend(y1, y2, y3)
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
legend(c("y1", "y2", "y3")
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
legend(1, -1, c("y1", "y2", "y3"), pch = c(1,2), lty = c(1,2))
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
#legend(1, -1, c("y1", "y2", "y3"), pch = c(1,2), lty = c(1,2))
legend(-0.2, 0.3, legend = c("y1", "y2", "y3"),
bty = "n", xpd=TRUE, mar=c(7,7,7,7), cex = 1, pch = c(10, 15, 1))
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
#legend(1, -1, c("y1", "y2", "y3"), pch = c(1,2), lty = c(1,2))
legend(-0.2, 0.3, legend = c("y1", "y2", "y3"),
bty = "n", xpd=TRUE, mar=c(7,7,7), cex = 1, pch = c(10, 15, 1))
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
#legend(1, -1, c("y1", "y2", "y3"), pch = c(1,2), lty = c(1,2))
legend(-0.2, 0.3, legend = c("y1", "y2", "y3"),
bty = "n", xpd=TRUE, cex = 1, pch = c(10, 15, 1))
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
legend(1, -1, c("y1", "y2", "y3"), pch = c(1,2,3), lty = c(1,2,3))
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax), legend = TRUE)
lines(y2, col = "red", legend=TRUE)
lines(y3, col = "blue", legend = TRUE)
plot(y1, ylab = "", xlab = "", main = "simulation VECM", ylim = c(ymin, ymax))
lines(y2, col = "red")
lines(y3, col = "blue")
legend(1, -1, c("y1", "y2", "y3"), pch = c(1,2,3), lty = c(1,2,3))
y.daframe = data.frame(y1, y2, y3)
vecm1 = ca.jo(y.daframe, type = "eigen", spec = "transitory")
vecm2 = ca.jo(y.daframe, type = "trace", spec = "transitory")
vecm.r2 = cajorls(vecm1, r = 2)
print(vecm1)
print(vecm.r2)
summary(vecm.r2)
summary(vecm1)
summary(vecm2)
vecm.level = vec2var(vecm1, r = 2)
vecm.prediction = predict(vecm.level, n.ahead = 10)
plot(vecm.prediction)
fanchart(vecm.prediction)
plot(vecm.prediction)
fanchart(vecm.prediction)
vecm.irf = irf(vecm.level, impulse = "y3", response ="y3", boot = FALSE)
vecm.fevd = fevd(vecm.level)
vecm.norm = normality.test(vecm.level)
vecm.arch = arch.test(vecm.level)
vecm.serial = serial.test(vecm.level)
print(vecm.irf)
plot(vecm.irf)
vecm.irf = irf(vecm.level, impulse = "y3", response ="y1", boot = FALSE)
plot(vecm.irf)
vecm.fevd = fevd(vecm.level)
plot(vecm.fevd)
plot(vecm.fevd$y1)
plot(vecm.fevd)
print(vecm.norm)
print(vecm.arch)
vecm.serial = serial.test(vecm.level)
print(vecm.serial)
plot(vecm.serial)
plot(vecm.arch)
plot(vecm.serial)
data(denmark)
sjd = as.matrix(denmark[, c("LRM", "LRY", "IBO", "IDE")])
sjd.vecm = ca.jo(sjd, constant = TRUE, type = "eigen", K = 2, spec = "longrun", season = 4)
head(ca.jo)
sjd.vecm = ca.jo(sjd, ecdet = "const", type = "eigen", K = 2, spec = "longrun", season = 4)
lttest.1 = lttest(sjd.vecm, r = 1)
sjf.vecm = ca.jo(sjf, ecdet = "trend", type = "eigen", K = 2, spec = "longrun", season = 4)
data(finland)
sjf = as.matrix(finland)
sjf.vecm = ca.jo(sjf, ecdet = "trend", type = "eigen", K = 2, spec = "longrun", season = 4)
lttest.2 = lttest(sjf.vecm, r=3)
sjf.vecm = ca.jo(sjf, ecdet = "none", type = "eigen", K = 2, spec = "longrun", season = 4)
lttest.2 = lttest(sjf.vecm, r=3)
data(UKpppuip)
attach(UKpppuip)
dat1 = cbind(p1, p2, e12, i1, i2)
dat2 = cbind(doilp0, doilp1)
head(UKpppuip)
dat1 = cbind(p1, p2, e12, i1, i2)
dat2 = cbind(doilp0, doilp1)
H1 = ca.jo(dat1, K = 2, season = 4, dumvar = dat2)
A1 = matrix(c(1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1), nrow = 5, ncol = 4)
A2 = matrix(c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0), nrow = 5, ncol = 4)
H41 = summary(alrtest(z = H1, A = A1, r = 2))
H42 = summary(alrtest(z = H1, A = A2, r = 2))
print(H41)
print(H4.2)
H4.1 = summary(alrtest(z = H1, A = A1, r = 2))
H4.2 = summary(alrtest(z = H1, A = A2, r = 2))
print(H4.1)
print(H4.2)
H.3.1 = matrix(c(1,-1,-1,0,0,0,0,0,1,0,0,0,0,0,1), c(5,3))
H.3.2 = matrix(c(1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,-1), c(5,4))
H31 = blrtest(z = H1, H = H.3.1, r = 2)
H32 = blrtest(z = H1, H = H.3.2, r = 2)
blrtest(z = H1, H = H.3.1, r = 2)
summary(H32)
H31 = blrtest(z = H1, H = H.3.1, r = 2)
summary(H31)
vec.canada = ca.jo(Canada, K = 2, spec = "transitory", season = 4)
LR = matrix(0, nrow = 4, ncol = 4)
LR[, c(1, 2)] = NA
SR = matrix(NA, nrow = 4, ncol = 4)
SR[3, 4] = 0
SR[4, 2] = 0
svecm = SVEC(vec.canada, r = 2, LR = LR,
SR = SR, max.iter = 200, lrtest = TRUE, boot = FALSE)
svecm.canada = SVEC(vec.canada, r = 2, LR = LR, SR = SR, max.iter = 200, lrtest = TRUE,
boot = FALSE)
svecm.irf = irf(svecm.canada, impulse = "e", response = "rw", boot = FALSE, cumulative = FALSE,
runs = 100)
svecm.fevd = fevd(svecm)
summary(svecm.irf)
svecm.irf
plot(svecm.irf)
svecm.fevd = fevd(svecm.canada)
plot(svecm.fevd)
q()
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
fig.width = 12, fig.height = 8)
library(AER)
library(fGarch)
data("NYSESW")
attach(NYSESW)
head(NYSESW)
NYSELOSS = timeSeries(-1.0 * diff(log(NYSESW))*100, charvec = time(NYSESW))
library(timeSeries)
NYSELOSS = timeSeries(-1.0 * diff(log(NYSESW))*100, charvec = time(NYSESW))
data("NYSESW")
NYSELOSS = timeSeries(-1.0 * diff(log(NYSESW))*100, charvec = time(NYSESW))
NYSELOSS = timeSeries(1.0 * diff(log(NYSESW))*100, charvec = time(NYSESW))
#head(NYSESW)
View(NYSESW)
NYSELOSS = timeSeries(-1.0 * diff(log(NYSESW[,1]))*100, charvec = time(NYSESW))
NYSELOSS = timeSeries(-1.0 * diff(log(NYSESW[,2]))*100, charvec = time(NYSESW))
NYSELOSS = timeSeries(-1.0 * diff(log(NYSESW[,1]))*100, charvec = time(NYSESW[,1]))
ESgarch = function(y, p = 0.99) {
gfit = garchFit(formula = ~garch(1,1), data = y, cond.dist = "std",
trace = FALSE)
sigma = predict(gfit, n.ahead = 1)[3]
df = coef(gfit)["shape"]
ES = sigma * (dt(qt(p, df), df)/(1-p))*((df + (qt(p,df))^2)/(df-1))
return(ES)
}
from = time(NYSELOSS)[-c((nrow(NYSELOSS)-999):
nrow(NYSELOSS))]
to = time(NYSELOSS)[-c(1:1000)]
NYSEES = fapply(NYSELOSS, from = from, to = to, FUN = ESgarch)
NYSELOSS = timeSeries(-1.0 * diff(log(NYSESW[,1]))*100, charvec = time(NYSESW[,1]))
q()
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
fig.width = 12, fig.height = 8)
NYSELOSS = as.character(format(as.POSIXct(attr(NYSESW, "times"))))
NYSELOSS = as.character(format(as.POSIXct(attr(NYSESW, "times")), "%Y-%m-%d"))
#head(NYSESW)
View(NYSESW)
NYSELOSS = ts(NYSESW[,1], start = c(1990, 1), end = c(2005, 11), frequency = 12)
ESgarch = function(y, p = 0.99) {
gfit = garchFit(formula = ~garch(1,1), data = y, cond.dist = "std",
trace = FALSE)
sigma = predict(gfit, n.ahead = 1)[3]
df = coef(gfit)["shape"]
ES = sigma * (dt(qt(p, df), df)/(1-p))*((df + (qt(p,df))^2)/(df-1))
return(ES)
}
from = time(NYSELOSS)[-c((nrow(NYSELOSS)-999):
nrow(NYSELOSS))]
from = time(NYSELOSS)[-c((nrow(NYSELOSS)):
nrow(NYSELOSS))]
to = time(NYSELOSS)[-c(1:1000)]
from = time(diff(NYSELOSS))[-c((nrow(NYSELOSS)):
nrow(NYSELOSS))]
head(fapply)
NYSEESL1 = lag(NYSEES, k = 1)
NYSEES = fapply(NYSELOSS, from = from, to = to, FUN = ESgarch)
NYSEES = fapply(NYSELOSS, from = NULL, to = to, FUN = ESgarch)
q()
PIBpc
981
987
992
997
1.003
1.008
1.013
1.019
1.024
1.030
1.035
1.041
1.046
1.052
1.058
1.063
1.069
1.075
1.081
1.086
1.092
1.063
1.005
856
855
1.078
977
962
987
968
934
1.005
984
983
981
988
1.060
1.039
1.010
1.068
1.058
1.150
1.114
1.116
1.073
1.098
1.107
1.159
1.112
1.232
1.326
1.326
1.389
1.439
1.409
1.387
1.388
1.459
1.594
1.566
1.443
1.382
1.402
1.481
1.572
1.583
1.700
1.720
1.756
1.738
1.720
1.799
1.692
1.883
1.908
1.913
2.066
2.089
2.197
2.284
2.301
2.343
2.412
2.456
2.543
2.651
2.610
2.745
2.906
3.057
3.214
3.442
3.516
3.444
3.463
3.469
3.514
3.589
3.894
4.164
4.416
4.794
5.242
5.832
6.209
6.379
6.838
6.984
7.041
7.342
7.825
7.308
7.181
6.780
6.980
7.375
7.802
7.924
7.766
7.873
7.493
7.475
7.316
7.532
7.806
8.020
8.067
8.210
8.111
8.027
8.258
8.257
8.396
8.383
8.757
8.933
9.183
9.638
10.027
9.916
10.559
10.874
10.980
11.206
11.163
10.651
10.185
library(readxl)
TSBRA <- read_excel("TSBRA.xlsx")
View(TSBRA)
xts_bra <- xts(dados_bra[,-1], order.by = as.yearmon(dados_bra[,1]))
library(readxl)
library(xts)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
fig.width = 10, fig.height = 6)
library(readxl)
library(xts)
dados_bra <- as.data.frame(read_excel("TSBRA.xlsx"))
startDate <- dados_bra[1,1] # extrair datas da primeira coluna
endDate <- dados_bra[nrow(dados_bra), 1]
startDate
endDate
xts_bra <- xts(dados_bra[,-1], order.by = as.yearmon(dados_bra[,1]))
xts_bra
plot(xts_bra)
plot(xts_bra$LP)
plot(xts_bra$PTF)
plot(xts_bra$PIBpc)
plot(xts_bra[, c("LP", "PTF", "IK", "Age")])
head(xts_bra)
plot(xts_bra$Age)
q()
